load_module /etc/nginx/modules/ngx_http_perl_module-debug.so;
# "events" context must appear always even if it's empty.
events {}

http {

  # Including all mime types will allow us to load all static files.
  include mime.types;
	perl_require http_lang.pm;

  # This directive will be inherited.
  gzip on;

  server {

    listen 8080;
    root /sites/bootstrap;

    # Enable nginx to look for files inside /sites through /downloads path.
    location /downloads {
      # You can define a specific log path for this location block.
      error_log /var/log/nginx/downloads.error.log;
      # Check http://wiki.nginx.org/CoreModule#error_log
      gzip off;

      # It's a good practice to disable access and error logs for static files so you save space and cpu.
      access_log off;
      error_log off;

      root /sites;
      # try_files will try to find the $uri returning 404 if not found.
      try_files $uri =404;
    }

		set $SUPPORTED_LANG 'en,pt,it,fr,de';
		set $SUPPORTED_LOCALES 'en-us,en-gb,pt,it,fr,de';

		location ~ (^(?!.*(pt|fr|de|it|en)).*$) {
				perl http_lang::handler;
		}

		location ~ /redirect-(.*) {
			return 301 /$1;
		}

    #####
    # Location blocks
    # Matching order:
    # =             Exact match.
    # ^~            Preferential prefix.
    # ~ and ~*      Regexp match.
    # No modifier:  Prefix match.
    #####

    # Matches any prefix.
    # /greet*
    # /greeting
    # /greet/something
    #location /greet {
    # return 200 'Hello from Nginx location';
    #}

    # Exact match.

    # location = /greet {
    #   return 200 'Hello from EXACT Nginx location';
    # }

    # Prefix preferential match.
    # Same as location /greet, but more important than regex match.

    # location ^~ /greet[0-9] {
    #   return 200 'Hello from case sensitive regexp Nginx location';
    # }

    # Regexp match
    # case sensitive (~),
    # case insentivie (~*).

    # location ~ /greet[0-9] {
    #   return 200 'Hello from case sensitive regexp Nginx location';
    # }
  }
}